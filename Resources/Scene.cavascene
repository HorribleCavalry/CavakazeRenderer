import "DirectionLight.cavalight"
import "Disney2012PBR.cavamaterial"

Scene
{
	Scene* InitializeScene()
	{
		Geometry* box0 = new BBox(CUM::Point3f(0.0, -2.1, 7.5), CUM::Vec3f(5.2, 0.1, 5.2));
		CUM::PrimitiveVector<Geometry>* primitiveVec1 = new CUM::PrimitiveVector<Geometry>;
		primitiveVec1->push_back(*box0);

		Geometry* box1 = new BBox(CUM::Point3f(-5.1, 0.0, 7.5), CUM::Vec3f(0.1, 2.0, 5.0));
		CUM::PrimitiveVector<Geometry>* primitiveVec2 = new CUM::PrimitiveVector<Geometry>;
		primitiveVec2->push_back(*box1);

		Geometry* box2 = new BBox(CUM::Point3f(5.1, 0.0, 7.5), CUM::Vec3f(0.1, 2.0, 5.0));
		CUM::PrimitiveVector<Geometry>* primitiveVec3 = new CUM::PrimitiveVector<Geometry>;
		primitiveVec3->push_back(*box2);

		Geometry* box3 = new BBox(CUM::Point3f(0.0, 2.1, 7.5), CUM::Vec3f(5.2, 0.1, 5.2));
		CUM::PrimitiveVector<Geometry>* primitiveVec4 = new CUM::PrimitiveVector<Geometry>;
		primitiveVec4->push_back(*box3);

		Geometry* box4 = new BBox(CUM::Point3f(0.0, 0.0, 12.6), CUM::Vec3f(5.2, 2.0, 0.1));
		CUM::PrimitiveVector<Geometry>* primitiveVec5 = new CUM::PrimitiveVector<Geometry>;
		primitiveVec5->push_back(*box4);

		Material* material1 = new Lambert;
		material1->roughness = 1.0;
		material1->metallic = 0.0;
		material1->Albedo = CUM::Color3f(0.85, 0.85, 0.85);

		Material* material2 = new Lambert;
		material2->roughness = 1.0;
		material2->metallic = 0.0;
		material2->Albedo = CUM::Color3f(1.0, 0.5, 0.5);

		Material* material3 = new Lambert;
		material3->roughness = 1.0;
		material3->metallic = 0.0;
		material3->Albedo = CUM::Color3f(0.5, 1.0, 0.5);

		Material* material4 = new Lambert;
		material4->roughness = 1.0;
		material4->metallic = 0.0;
		material4->Albedo = CUM::Color3f(0.5, 0.5, 1.0);

		Material* material5 = new Lambert;
		material5->roughness = 1.0;
		material5->metallic = 0.0;
		material5->Albedo = CUM::Color3f(0.85, 0.85, 0.85);

		Mesh* mesh1 = new Mesh(primitiveVec1, material1);
		Mesh* mesh2 = new Mesh(primitiveVec2, material2);
		Mesh* mesh3 = new Mesh(primitiveVec3, material3);
		Mesh* mesh4 = new Mesh(primitiveVec4, material4);
		Mesh* mesh5 = new Mesh(primitiveVec5, material5);

		CUM::PrimitiveVector<Mesh>* meshVec0 = new CUM::PrimitiveVector<Mesh>;
		meshVec0->push_back(*mesh1);
		meshVec0->push_back(*mesh2);
		meshVec0->push_back(*mesh3);
		meshVec0->push_back(*mesh4);
		meshVec0->push_back(*mesh5);

		CUM::Vec3f scale(1.0, 1.0, 1.0);
		CUM::Vec3f translation(0.0, 0.0, 2.0);
		CUM::Quaternionf rotation(CUM::Vec3f(0.0, 1.0, 0.0), 0.0);
		CUM::Transform trans(scale, rotation, translation);

		Object* object = new Object(trans, meshVec0);

		CUM::PrimitiveVector<Object>* objectVec = new CUM::PrimitiveVector<Object>;
		Float W = 10;

		for (Int i = 0; i < 5; i++)
		{
			for (Int j = 0; j < 5; j++)
			{
				Geometry* spR = new Sphere(CUM::Point3f(2.0* i + 0.25 - 5.0, -1.65, 2.0 * j + 0.25 + 0.5 * 7.5), 0.25);
				CUM::PrimitiveVector<Geometry>* geoVec = new CUM::PrimitiveVector<Geometry>;
				geoVec->push_back(*spR);
				Material* mat = new Material;
				mat->Albedo = CUM::Color3f(0.4, 0.8, 0.8);
				mat->roughness = i / 5.0;
				mat->metallic = j / 5.0;
				Mesh* mesh = new Mesh(geoVec, mat);
				meshVec0->push_back(*mesh);
			}
		}

		objectVec->push_back(*object);
		Scene* scene = new(camera, objectVec);
		return scene;
	}
};




